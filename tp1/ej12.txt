data Nat = Z | S Nat

suma :: Nat → Nat → Nat
suma Z m = m -- { S1 }
suma ( S n ) m = S ( suma n m ) -- { S2 }

cantLit :: Expr → Nat
cantLit (Const _ ) = S Z -- { L1 }
cantLit (Rango _ _ ) = S Z -- { L2 }
cantLit (Suma a b ) = suma ( cantLit a ) ( cantLit b ) -- { L3 }
cantLit (Resta a b ) = suma ( cantLit a ) ( cantLit b ) -- { L4 }
cantLit (Mult a b ) = suma ( cantLit a ) ( cantLit b) -- { L5 }
cantLit (Div a b ) = suma ( cantLit a ) ( cantLit b ) -- { L6 }

cantOp :: Expr → Nat
cantOp (Const _) = Z -- { O1 }
cantOp (Rango _ _) = Z -- { O2 }
cantOp (Suma a b) = S ( suma ( cantOp a ) ( cantOp b )) -- { O3 }
cantOp (Resta a b) = S ( suma ( cantOp a ) ( cantOp b )) -- { O4 }
cantOp (Mult a b) = S ( suma ( cantOp a ) ( cantOp b )) -- { O5 }
cantOp (Div a b) = S ( suma ( cantOp a ) ( cantOp b )) -- { O6 }

{CONMUT} ∀n, m :: Nat · suma n m = suma m n



∀e :: Expr · cantLit e = S (cantOp e)

Caso base 1:  e = Const _
            cantLit e               ={L1}
            S Z                     ={O1}
            S (cantOp(Const _))     ={igualdad definida en caso base}
            S (cantOp e)

Caso base 2: e = Rango _ _
            cantLit e               ={L2}
            S Z                     ={O2}
            S (cantOp Rango _ _)    ={igualdad definida en caso base}
            S (cantOp e)

Luego, se cumplen los Casos Base
            

Paso inductivo: e = Suma a b
    Asumo como Verdadero que 
    {HIa} cantLit a = S (cantOp a)
    {HIb} cantLit b = S (cantOp b)

    Quiero ver que: cantLit e = S (cantOp e)
            cantLit (Suma a b)                          ={L3}
            suma (cantLit a) (cantLit b)                ={HI}
            suma ((S (cantOp a)) (S (cantOp b)))        ={S2}
            S (suma (cantOp a) (S (cantOp b)))          ={CONMUT}
            S (suma (S (cantOp b)) (cantOp a))          ={S2}
            S (S (suma (cantOp b) (cantOp a)))          ={CONMUT}  
            S (S (suma (cantOp a) (cantOp b)))          ={O3}
            S (cantOp (Suma a b))                       ={eSUMA}
            S (cantOp e)
            
    Como queriamos probar